// Используем библиотеку миксинов Bourbon (http://bourbon.io/). В примере используется CodeKit, который по умолчанию умеет компилить Bourbon - достаточно просто указать директиву импорта.
@import 'bourbon';

// Здесь у нас все переменные: цвета, шрифты и др.
@import 'variables'; 

// Подключаем остальные scss-файлы, обрати внимание - предваряющее нижнее подчеркивание и расширение не пишутся
@import 'mixins';
@import 'layout';

/* -------------------------------- 

Базовые стили

-------------------------------- */

*, *::after, *::before {
	box-sizing: border-box; // Задаем блочную модель, учитывающую padding и border при расчете ширины и высоты
}

html {
	font-size: 62.5%; // Теперь 1 rem (root em) равен 10 пикселей, 2 rem - 20 пикселей. Очень удобно.
}

body {
	font: {
		size: 1.6rem;
		family: $primary-font; // Переменные в файле _variables.scss (нижним подчеркиванием в Sass предваряются файлы, которые включаются в состав других файлов)
	}
	color: $color-1;
	background-color: $color-3;
}

a {
	color: $color-2;
	text-decoration: none;
}

// Нужно растянуть элемент <svg> на всю ширину для реализации адаптивности
svg {
	max-width: 100%;
}

/* -------------------------------- 

Переиспользуемые части нашей страницы (пример хорошего подхода (методологии), хоть в данном случае это и избыточно)

-------------------------------- */

//Кнопка
.btn {
	display: inline-block; // Чтобы была возможность управлять блочной моделью (по умолчанию <a>, который мы используем для кнопки  - инлайновый, то есть строчный, и ему нельзя указать вертикальные паддинги и border)
	padding: 1em 2em;
	color: $color-2;
	border: 2px solid $color-2;
	font-weight: 700; // Жирность начертания лучше всегда указывать ЯВНО, в избежание недоразумений в некоторых браузерах
	@include font-smoothing; // Миксин, о котором подробнее в файле _mixins.scss

	// Этот селектор будет работать только на устройствах БЕЗ тач-скрина (класс .no-touch подставляет Modernizr, если мы заходим на страничку, скажем с обычного ноутбука). Но тут нужно принимать во внимание, что так хавера у нас не будет в на тех НЕтач устройствах, в которых отключен JavaScript, хотя сейчас сложно себе представить браузер, в котором отключен JS ;-). Честно сказать, в данном примере такая проверка не предусмотрена, да и в целом, даже если такой селектор применить на тач-устройстве, то мы просто не увидим хавер-эффекта. А вот например :active сработает. Этот селектор был объявлен в оригинальном примере, так что я счел нужным объяснить ЗАЧЕМ.
	.no-touch &:hover {
		background-color: $color-2;
		color: $color-3;
	}
}

/* -------------------------------- 

Основной контент

-------------------------------- */

.main-content {
	position: relative; // Непонятно зачем в оригинале было задано, так как внутри нет абсолютно позиционированных элементов - или забыли удалить, или нужно для чего-то менее очевидно (может быть, это хак для старых браузеров)
	width: 100%;
	height: 100vh; // Высота этого блока равна высоте области просмотра (проверь, изменив высоту окна браузера)
	display: table; // Делаем .main-content по поведению схожим с таблицей, чтобы внутренний элемент сделать ведущим себя как ячейка таблицы

	.center {
		display: table-cell; // Это позволит задать вертикальное выравнивание по центру и будет поддерживаться подавляющим большинством браузеров, так как таблицы в верстке используются еще с незапямятных времен
		vertical-align: middle; // Собственно центрируем по вертикали
		text-align: center;
	}

	h1 {
		font-size: 2.2rem;
		line-height: 3.2rem; // Высоту строки тоже лучше всегда задавать явно
		margin-bottom: 1em; // Непонятно, почему тут em, хотя везде вроде rem, но видимо описка
	}

	@include MQ(M) { // Тот самый миксин для реализации медиа-запросов
		h1 {
			font-size: 4rem;
			font-weight: 300;
		}
	}
}

/* -------------------------------- 

Стили модального окна

-------------------------------- */

.modal {
	position: fixed; // Фиксируем позицию модального окна во вьюпорте
	z-index: 2; // и выводим его на первый план онтосительно всех остальных слоев
	top: 0; // Прибиваем к верхнему
	left: 0; // левому углу
	height: 100%; // и делаем высоту и
	width: 100%; // ширину равными 100 процентам
	visibility: hidden; // Скрываем элемент, причем место до этого занимаемое им остается за ним
	@include transition(visibility 0s $animation-duration); // Bourbon-миксин для задания transition - тут мы используем объявленну переменную длительности анимации

	svg {
		position: absolute; // Позиционируем абсолютно
		top: 0; // и прибиваем к верхнему
		left: 0; // левому углу
	}

	svg > path {
		fill: $color-1; // Выбираем все элементы <path>, расположенные непосредственно внутри <svg> и задаем им заливку (fill это свойство из спецификации SVG 1.1, который сейчас во всеобщем употреблении, хотя готовится и SVG 2.0 - см. тут: http://www.w3.org/TR/SVG/)
	}

	/* Кнопка закрытия окна 'X' */
	.modal-close {
		position: absolute;
		z-index: 1; // Кнопка закрытия спозиционирована абсолютно относительно контейнера с самим модальным окном .modal. Несмотря на то, что "прокладка" .cover-layer между основным контентом страницы .main-content и .modal находится ниже в HTML-коде, имея такой же z-index: 1, кнопка "X" все равно будет выше, так как является дочерним элементом .modal, для которого z-index установлен в 2.
		top: 20px;
		right: 5%; // Справа отступаем в процентах, потому что нам нужно реализовать адаптивность
		height: 50px; // Размеры крестика 
		width: 50px; // фиксированные
		border-radius: 50%; // Скругляем контейнер до круга
		background: rgba(#000, .3) url(../img/icon-close.svg) no-repeat center center; // Фон задаем через модель RGB с альфа-каналом и указываем путь к SVG-картинке
		overflow: hidden; // Замена текста изображением: скрываем то, что находится за границами контейнера,
		text-indent: 100%; // сдвигаем текст вправо на ширину контейнера
		white-space: nowrap; // и отключаем перенос строк непомещающегося в одну строку текста

		/* А здесь мы задействуем Bourbon-миксины, которые заставляют браузер думать что он имеет дело с 3D-объектом и обрабатывает его графическим ускорителем; по факту трехмерных трансформаций не происходит. Забавный хак, направленный на увеличение производительности */
		@include transform(translateZ(0)); // Нулевое смещение объекта по оси Z
		@include backface-visibility(hidden); // Трехмерная плоскость имеет обратную сторону, которая не видна наблюдателю, поэтому здесь мы говорим, что 3D-акселлератору его высчитывать не нужно - это опять же, для повышения производительности

		visibility: hidden; // Здесь может возникнуть вопрос, почему для скрытия объекта используется и visibility и opacity - дело в том, что opacity анимируется в отличии от visibility,
		opacity: 0; // но оно же и не поддерживается старыми IE
		// Смотри информацию по разным способам скрытия элементов со страницы здесь: https://vk.com/makewebme?w=wall-96139053_91

		@include transform(scale(0)); // Еще один миксин для псевдотрансформации, но непонятно зачем их целых три, ведь и одного @include transform(translateZ(0)) по идее достаточно, чтобы заставить браузер думать, что он имеет дело с 3D-объектом. Но здесь, видимо, есть тонкость.

		@include transition(transform .3s 0s, visibility 0s .3s, opacity .3s 0s); // Миксины Бурбона, для задания продолжительности transition-анимации и задержки перед её началом

		.no-touch &:hover {
			background-color: rgba(#000, .5); // Для НЕтач устройств делаем фон полупрозрачным черным при наведении курсора
		}
	}

	/* Класс .modal-is-visible присваивается через JS-скрипт и определяет переход между невидимым и видимым состояниями */
	&.modal-is-visible { // Здесь показываем .modal
		visibility: visible;
		@include transition(visibility 0s 0s);

		.modal-close { // А здесь показываем кнопку закрытия модального окна - наборы свойств аналогичны разобранным ранее, так что без доп.комментов
			visibility: visible;
			opacity: 1;
			@include transition(transform .3s 0s, visibility 0s 0s, opacity .3s 0s);
			@include transform(scale(1));
		}
	}
}

// Стилизуем содержимое модального окна
.modal-content {
	position: relative;
	height: 100vh; // Высота окна 100 процентов высоты вьюпорта
	overflow-y: auto; // Разрешаем прокрутку по оси Y
	padding: 3em 5% 4em;
	opacity: 0;
	@include transform(translateY(50px)); // Смещаем контент на 50 пикс вниз по оси Y
	@include transition(opacity $animation-duration/2 0s, transform $animation-duration/2 0s);
	@include font-smoothing;

	p {
		color: $color-3;
		line-height: 1.6;
		margin: 2em 0;
	}

	.modal-is-visible & {
		opacity: 1;
		@include transform(translateY(0));
		-webkit-overflow-scrolling: touch; // Плавный скролл пальцем в блоке - только Webkit'ы
		@include transition(opacity $animation-duration/2 $animation-duration/2, transform $animation-duration/2 $animation-duration/2); // Тут мы в 2 раза уменьшаем продолжительность анимации и задержку перед её началом
	}

	@include MQ(M) { // Тот самый миксин для реализации медиа-запросов
		padding: 3em 10% 4em;

		p {
			font-size: 2.4rem;
		}
	}
}

/* -------------------------------- 

 Стили для слоя-прокладки .cover-layer

-------------------------------- */

// Тут уже должно быть все понятно
.cover-layer {
	position: fixed;
	z-index: 1;
	top: 0;
	left: 0;
	height: 100%;
	width: 100%;
	background-color: $color-3;
	visibility: hidden;
	opacity: 0;
	@include transition(opacity $animation-duration/2 $animation-duration/2, visibility 0s $animation-duration);

	&.modal-is-visible {
		opacity: 1;
		visibility: visible;
		@include transition(opacity $animation-duration/2 0s, visibility 0s 0s);
	}
}